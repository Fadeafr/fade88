from telethon.sync import TelegramClient<br/>from telethon.tl.functions.messages import GetDialogsRequest<br/>from telethon.tl.types import InputPeerEmpty, InputPeerChannel, InputPeerUser<br/>from telethon.errors.rpcerrorlist import PeerFloodError, UserPrivacyRestrictedError<br/>from telethon.tl.functions.channels import InviteToChannelRequest<br/>import configparser<br/>import os<br/>import sys<br/>import csv<br/>import traceback<br/>import time<br/>import random<div></div>re="\033[1;31m"<br/>gr="\033[1;32m"<br/>cy="\033[1;36m"<div></div>print (re+"╔╦╗┌─┐┬  ┌─┐╔═╗  ╔═╗┌┬┐┌┬┐┌─┐┬─┐")<br/>print (gr+" ║ ├┤ │  ├┤ ║ ╦  ╠═╣ ││ ││├┤ ├┬┘")<br/>print (re+" ╩ └─┘┴─┘└─┘╚═╝  ╩ ╩─┴┘─┴┘└─┘┴└─")<div></div>print (cy+"version : 1.01")<br/>print (cy+"Make sure you Subscribed Termux Professor On Youtube")<br/>print (cy+"www.youtube.com/c/TermuxProfessorYT")<div></div>print (re+"NOTE :")<br/>print ("1. Telegram only allow to add 200 members in group by one user.")<br/>print ("2. You can Use multiple Telegram accounts for add more members.")<br/>print ("3. Add only 50 members in group each time otherwise you will get flood error.")<br/>print ("4. Then wait for 15-30 miniute then add members again.")<br/>print ("5. Make sure you enable Add User Permission in your group")<div></div>cpass = configparser.RawConfigParser()<br/>cpass.read('config.data')<div></div>try:<br/>    api_id = cpass['cred']['id']<br/>    api_hash = cpass['cred']['hash']<br/>    phone = cpass['cred']['phone']<br/>    client = TelegramClient(phone, api_id, api_hash)<br/>except KeyError:<br/>    os.system('clear')<br/>    banner()<br/>    print(re+"[!] run python setup.py first !!\n")<br/>    sys.exit(1)<div></div>client.connect()<br/>if not client.is_user_authorized():<br/>    client.send_code_request(phone)<br/>    os.system('clear')<br/>    banner()<br/>    client.sign_in(phone, input(gr+'[+] Enter the code: '+re))<div></div>users = []<br/>with open(r"members.csv", encoding='UTF-8') as f:  #Enter your file name<br/>    rows = csv.reader(f,delimiter=",",lineterminator="\n")<br/>    next(rows, None)<br/>    for row in rows:<br/>        user = {}<br/>        user['username'] = row[0]<br/>        user['id'] = int(row[1])<br/>        user['access_hash'] = int(row[2])<br/>        user['name'] = row[3]<br/>        users.append(user)<div></div>chats = []<br/>last_date = None<br/>chunk_size = 200<br/>groups = []<div></div>result = client(GetDialogsRequest(<br/>    offset_date=last_date,<br/>    offset_id=0,<br/>    offset_peer=InputPeerEmpty(),<br/>    limit=chunk_size,<br/>    hash=0<br/>))<br/>chats.extend(result.chats)<div></div>for chat in chats:<br/>    try:<br/>        if chat.megagroup == True:<br/>            groups.append(chat)<br/>    except:<br/>        continue<div></div>print(gr+'Choose a group to add members:'+cy)<br/>i = 0<br/>for group in groups:<br/>    print(str(i) + '- ' + group.title)<br/>    i += 1<div></div>g_index = input(gr+"Enter a Number: "+re)<br/>target_group = groups[int(g_index)]<div></div>target_group_entity = InputPeerChannel(target_group.id, target_group.access_hash)<div></div>mode = int(input(gr+"Enter 1 to add by username or 2 to add by ID: "+cy))<div></div>n = 0<div></div>for user in users:<br/>    n += 1<br/>    if n % 80 == 0:<br/>        sleep(60)<br/>    try:<br/>        print("Adding {}".format(user['id']))<br/>        if mode == 1:<br/>            if user['username'] == "":<br/>                continue<br/>            user_to_add = client.get_input_entity(user['username'])<br/>        elif mode == 2:<br/>            user_to_add = InputPeerUser(user['id'], user['access_hash'])<br/>        else:<br/>            sys.exit("Invalid Mode Selected. Please Try Again.")<br/>        client(InviteToChannelRequest(target_group_entity, [user_to_add]))<br/>        print("Waiting for 60-180 Seconds...")<br/>        time.sleep(random.randrange(0, 5))<br/>    except PeerFloodError:<br/>        print("Getting Flood Error from telegram. Script is stopping now. Please try again after some time.")<br/>        print("Waiting {} seconds".format(SLEEP_TIME_2))<br/>        time.sleep(SLEEP_TIME_2)<br/>    except UserPrivacyRestrictedError:<br/>        print("The user's privacy settings do not allow you to do this. Skipping.")<br/>        print("Waiting for 5 Seconds...")<br/>        time.sleep(random.randrange(0, 5))<br/>    except:<br/>        traceback.print_exc()<br/>        print("Unexpected Error")<br/>        continue